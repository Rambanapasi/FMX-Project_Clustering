mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn)) %>%
summarise(date = last(date), rtn = round(last(momen),2)) %>%
mutate(rank = rank(rtn, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank)) %>% filter(rtn != Inf)
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn)-1) %>%
summarise(date = last(date), rtn = round(last(momen),2)) %>%
mutate(rank = rank(rtn, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank)) %>% filter(rtn != Inf)
clusteringdata <- closing_prices%>%
tbl2xts::xts_tbl() %>%
gather(stock, px, -date) %>%
filter(date>= ymd(20140101)) %>% filter(stock %in% liquid_shares)
momentum_filter <-clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn)-1) %>%
summarise(date = last(date), rtn = round(last(momen),2)) %>%
mutate(rank = rank(rtn, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank)) %>% filter(rtn != Inf)
momentum_filter
Volumes %>%
filter(date >= Sys.Date() - 200) %>%
group_by(ticks) %>%
summarise(average_volume = mean(vol, na.rm = TRUE)) %>%
filter(average_volume > 10000000) %>%
mutate(rank = rank(average_volume, na.last = "keep", ties.method = "min")) %>%
filter(rank %in% 1:100) %>%
arrange(desc(rank)) %>% select(ticks) %>% pull()
Volumes %>%
filter(date >= Sys.Date() - 200) %>%
group_by(ticks) %>%
summarise(average_volume = mean(vol, na.rm = TRUE)) %>%
filter(average_volume > 1000000) %>%
mutate(rank = rank(average_volume, na.last = "keep", ties.method = "min")) %>%
filter(rank %in% 1:100) %>%
arrange(desc(rank)) %>% select(ticks) %>% pull()
Volumes %>%
filter(date >= Sys.Date() - 200) %>%
group_by(ticks) %>%
summarise(average_volume = mean(vol, na.rm = TRUE)) %>%
filter(average_volume > 5000000) %>%
mutate(rank = rank(average_volume, na.last = "keep", ties.method = "min")) %>%
filter(rank %in% 1:100) %>%
arrange(desc(rank)) %>% select(ticks) %>% pull()
Volumes %>%
filter(date >= Sys.Date() - 200) %>%
group_by(ticks) %>%
summarise(average_volume = mean(vol, na.rm = TRUE)) %>%
filter(average_volume > 50000000) %>%
mutate(rank = rank(average_volume, na.last = "keep", ties.method = "min")) %>%
filter(rank %in% 1:100) %>%
arrange(desc(rank)) %>% select(ticks) %>% pull()
Volumes %>%
filter(date >= Sys.Date() - 200) %>%
group_by(ticks) %>%
summarise(average_volume = mean(vol, na.rm = TRUE)) %>%
filter(average_volume > 1000000) %>%
mutate(rank = rank(average_volume, na.last = "keep", ties.method = "min")) %>%
filter(rank %in% 1:100) %>%
arrange(desc(rank)) %>% select(ticks) %>% pull()
Volumes %>%
filter(date >= Sys.Date() - 200) %>%
group_by(ticks) %>%
summarise(average_volume = mean(vol, na.rm = TRUE)) %>%
filter(average_volume > 8000000) %>%
mutate(rank = rank(average_volume, na.last = "keep", ties.method = "min")) %>%
filter(rank %in% 1:100) %>%
arrange(desc(rank)) %>% select(ticks) %>% pull()
Volumes %>%
filter(date >= Sys.Date() - 200) %>%
group_by(ticks) %>%
summarise(average_volume = mean(vol, na.rm = TRUE)) %>%
filter(average_volume > 500000) %>%
mutate(rank = rank(average_volume, na.last = "keep", ties.method = "min")) %>%
filter(rank %in% 1:100) %>%
arrange(desc(rank)) %>% select(ticks) %>% pull()
liquid_shares  <- Volumes %>%
filter(date >= Sys.Date() - 200) %>%
group_by(ticks) %>%
summarise(average_volume = mean(vol, na.rm = TRUE)) %>%
filter(average_volume > 500000) %>%
mutate(rank = rank(average_volume, na.last = "keep", ties.method = "min")) %>%
filter(rank %in% 1:100) %>%
arrange(desc(rank)) %>% select(ticks) %>% pull()
# lets get the derivatives to filter the entire process
# now I want a momentum filter, so for every six months rank the stock returns by momemtum and bucket them
clusteringdata <- closing_prices%>%
tbl2xts::xts_tbl() %>%
gather(stock, px, -date) %>%
filter(date>= ymd(20140101)) %>% filter(stock %in% liquid_shares)
momentum_filter <-clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn)-1) %>%
summarise(date = last(date), rtn = round(last(momen),2)) %>%
mutate(rank = rank(rtn, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank)) %>% filter(rtn != Inf)
volatility_filter
momentum_filter
volatility_filter <-clusteringdata %>%
filter(date>= Sys.Date()-days(100))
clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock)
clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(ret = px/lag(px)-1)
clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(ret = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(ret, na.rm = T))
clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(ret = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(ret, na.rm = T)) %>%
mutate(rank = rank(rtn, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank))
volatility_filter <-clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(rtn = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(rtn, na.rm = T)) %>%
mutate(rank = rank(SD, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank))
volatility_filter
momentum_filter <-clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn)-1) %>%
summarise(date = last(date), rtn = round(last(momen),2)) %>%
mutate(rank_momen = rank(rtn, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank_momen))
volatility_filter <-clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(rtn = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(rtn, na.rm = T)) %>%
mutate(rank_vol = rank(SD, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank_vol))
volatility_filter
momentum_filter
volatility_filter
liquid_shares  <- Volumes %>%
filter(date >= Sys.Date() - 200) %>%
group_by(ticks) %>%
summarise(average_volume = mean(vol, na.rm = TRUE)) %>%
filter(average_volume > 1000000) %>%
mutate(rank = rank(average_volume, na.last = "keep", ties.method = "min")) %>%
filter(rank %in% 1:100) %>%
arrange(desc(rank)) %>% select(ticks) %>% pull()
# lets get the derivatives to filter the entire process
# now I want a momentum filter, so for every six months rank the stock returns by momemtum and bucket them
clusteringdata <- closing_prices%>%
tbl2xts::xts_tbl() %>%
gather(stock, px, -date) %>%
filter(date>= ymd(20140101)) %>% filter(stock %in% liquid_shares)
momentum_filter <-clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn)-1) %>%
summarise(date = last(date), rtn = round(last(momen),2)) %>%
mutate(rank_momen = rank(rtn, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank_momen))
volatility_filter <-clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(rtn = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(rtn, na.rm = T)) %>%
mutate(rank_vol = rank(SD, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank_vol))
volatility_filter
liquid_shares  <- Volumes %>%
filter(date >= Sys.Date() - 200) %>%
group_by(ticks) %>%
summarise(average_volume = mean(vol, na.rm = TRUE)) %>%
filter(average_volume > 1500000) %>%
mutate(rank = rank(average_volume, na.last = "keep", ties.method = "min")) %>%
filter(rank %in% 1:100) %>%
arrange(desc(rank)) %>% select(ticks) %>% pull()
# lets get the derivatives to filter the entire process
# now I want a momentum filter, so for every six months rank the stock returns by momemtum and bucket them
clusteringdata <- closing_prices%>%
tbl2xts::xts_tbl() %>%
gather(stock, px, -date) %>%
filter(date>= ymd(20140101)) %>% filter(stock %in% liquid_shares)
momentum_filter <-clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn)-1) %>%
summarise(date = last(date), rtn = round(last(momen),2)) %>%
mutate(rank_momen = rank(rtn, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank_momen))
volatility_filter <-clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(rtn = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(rtn, na.rm = T)) %>%
mutate(rank_vol = rank(SD, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank_vol))
volatility_filter
volatility_filter <-clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(rtn = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(rtn, na.rm = T)) %>%
mutate(rank_vol = rank(SD, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank_vol)) %>%  select(date, stock, rank_vol)
# get the momentum for the past 6 months and rank stock according, this can be created into a function to consider long price momentum periods
momentum_filter <-clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn)-1) %>%
summarise(date = last(date), rtn = round(last(momen),2)) %>%
mutate(rank_momen = rank(rtn, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank_momen)) %>% select(date, stock, rank_momen)
momentum_filter
volatility_filter
ranking.df <- left_join(volatility_filter, momentum_filter, c("date", "stock"))
ranking.df
momentum_filter
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn)-1) %>%
summarise(date = last(date), rtn = round(last(momen),2)) %>%
mutate(rank_momen = rank(rtn, na.last = "keep", ties.method = "min")) %>%
arrange(desc(rank_momen))
fviz_nbclust(df, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(ranking.df, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
ranking.df
ranking.df$rank_vol <- as.numeric(ranking.df$rank_vol)
ranking.df$rank_vol
ranking.df
ranking.df$rank_momen <- as.numeric(ranking.df$rank_momen)
fviz_nbclust(ranking.df, kmeans, method = "wss")
data("USArrests")
View(data)
force(USArrests)
df <- scale(USArrests)
df
df <- USArrests
df
str(df)
kmeans <- ranking.df %>% select(-stock)
kmns <- ranking.df %>% select(-stock)
fviz_nbclust(kmns, kmeans, method = "wss")
fviz_nbclust(ranking.df, kmeans, method = "silhouette")
ranking.df
# Sample data
data <- c(10, 15, 20, 25, 30)
# Calculate percentile scores
percentile_scores <- quantile(data, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
# Display the result
print(percentile_scores)
library(dplyr)
# Sample data frame
df <- data.frame(value = c(10, 15, 20, 25, 30))
# Calculate percentile scores
df <- df %>%
mutate(percentile_score = quantile(value, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE))
# Display the result
print(df)
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn)-1) %>%
summarise(date = last(date), rtn = round(last(momen),2)) %>%
mutate(percentile_rtn = quantile(rtn, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE))
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2)) %>%
mutate(percentile_rtn = quantile(rtn, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(rtn))
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2)) %>%
group_by(stock) %>%
summarise(percentile_rtn = quantile(rtn, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(rtn))
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2)) %>%
summarise(percentile_rtn = quantile(rtn, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(rtn))
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1)
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2))
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2)) %>%
mutate( percentile_rank <- rank(rtn) / length(rtn) * 100)
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2)) %>%
mutate( percentile_rank = rank(rtn) / length(rtn) * 100)
clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(rtn = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(rtn, na.rm = T)) %>%
mutate( percentile_rank_momentum = rank(SD) / length(SD) * 100)
clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2)) %>%
mutate( percentile_rank_momen = rank(rtn) / length(rtn) * 100) %>%
select(date, stock, percentile_rank_momen)
momentum_filter <-clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2)) %>%
mutate( percentile_rank_momen = rank(rtn) / length(rtn) * 100) %>%
select(date, stock, percentile_rank_momen)
# this similar to price momentum it just considers volatility
volatility_filter <-clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(rtn = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(rtn, na.rm = T)) %>%
mutate( percentile_rank_vol = rank(SD) / length(SD) * 100) %>% select(date, stock, percentile_rank_vol)
# for the momentum ranking, the higher it is the larger the price momentum effect
ranking.df <- left_join(volatility_filter, momentum_filter, c("date", "stock"))
# remove the stock name
km.res <- kmeans(ranking.df, 4, nstart = 25)
# for the momentum ranking, the higher it is the larger the price momentum effect
ranking.df <- left_join(volatility_filter, momentum_filter, c("date", "stock"))
ranking.df
# for the momentum ranking, the higher it is the larger the price momentum effect
ranking.df <- left_join(volatility_filter, momentum_filter, c("date", "stock"))
# remove the stock name
km.res <- kmeans(ranking.df, 4, nstart = 25)
# remove the stock name
ranking.df <- na.omit(ranking.df)
km.res <- kmeans(ranking.df, 4, nstart = 25)
ranking.df
write.csv(ranking.df, file = "data/", row.names = FALSE)
write.csv(ranking.df, file = "/Users/gabrielrambanapasi/Desktop/Finmetrics paper/data", row.names = FALSE)
write.csv(ranking.df, file = "/Users/gabrielrambanapasi/Desktop/Finmetrics paper/data/data.csv", row.names = FALSE)
df <- read_csv("data/data.csv")
# remove the stock name
km.res <- kmeans(df, 4, nstart = 25)
df <- scale(ranking.df)
ranking.df %>% tbl2xts::tbl_xts()
km.res <- kmeans(df, 4, nstart = 25)
df <- ranking.df %>% tbl2xts::tbl_xts() %>% scale()
km.res <- kmeans(df, 4, nstart = 25)
km.res
ranking.df <- left_join(volatility_filter, momentum_filter, c( "stock"))
ranking.df
momentum_filter <-clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2)) %>%
mutate( percentile_rank_momen = rank(rtn) / length(rtn) * 100) %>%
select(stock, percentile_rank_momen)
# this similar to price momentum it just considers volatility
volatility_filter <-clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(rtn = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(rtn, na.rm = T)) %>%
mutate( percentile_rank_vol = rank(SD) / length(SD) * 100) %>% select(stock, percentile_rank_vol)
# for the momentum ranking, the higher it is the larger the price momentum effect
ranking.df <- left_join(volatility_filter, momentum_filter, c( "stock"))
ranking.df
df <- ranking.df %>% tbl2xts::tbl_xts() %>% scale()
ranking.df %>% tbl2xts::tbl_xts()
ranking.df
df <- ranking.df  %>% scale()
ranking.df
df <- ranking.df %>% scale()
# get the momentum for the past 6 months and rank stock according, this can be created into a function to consider long price momentum periods
momentum_filter <-clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2)) %>%
mutate( percentile_rank_momen = rank(rtn) / length(rtn) * 100) %>%
select(date, stock, percentile_rank_momen)
# this similar to price momentum it just considers volatility
volatility_filter <-clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(rtn = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(rtn, na.rm = T)) %>%
mutate( percentile_rank_vol = rank(SD) / length(SD) * 100) %>% select(date, stock, percentile_rank_vol)
# for the momentum ranking, the higher it is the larger the price momentum effect
ranking.df <- left_join(volatility_filter, momentum_filter, c("date","stock"))
df <- ranking.df %>% tbl2xts::tbl_xts() %>% scale()
df
momentum_filter <-clusteringdata %>%
filter(date >= Sys.Date() - months(6)) %>%
group_by(stock) %>%
arrange(date) %>%
mutate(rtn = px/lag(px) - 1,
rtn = coalesce(rtn, 0),
momen = cumprod(1 + rtn) - 1) %>%
summarise(date = last(date), rtn = round(last(momen), 2)) %>%
mutate( percentile_rank_momen = rank(rtn) / length(rtn) * 100) %>%
select(stock, percentile_rank_momen)
# this similar to price momentum it just considers volatility
volatility_filter <-clusteringdata %>%
filter(date>= Sys.Date()-days(100)) %>%
group_by(stock) %>%
arrange(date) %>% mutate(rtn = px/lag(px)-1) %>% summarize(date = last(date), SD = sd(rtn, na.rm = T)) %>%
mutate( percentile_rank_vol = rank(SD) / length(SD) * 100) %>% select(stock, percentile_rank_vol)
left_join(volatility_filter, momentum_filter, 'stock')
ranking.df <- left_join(volatility_filter, momentum_filter, 'stock')
ranking.df %>% tbl2xts::tbl_xts() %>% scale()
df <- ranking.df  %>% scale()
ranking.df  %
ranking.df <- left_join(volatility_filter, momentum_filter, 'stock')
ranking.df
ranking.df  %>% scale()
df <- ranking.df
kmeans(df, 4, nstart = 25)
data("USArrests") # Loading the data set
df <- scale(USArrests) # Scaling the data
# View the firt 3 rows of the data
head(df, n = 3)
str(df)
ranking.df
str(ranking.df)
ranking.df %>% as.data.frame()
ranking <- ranking.df %>% as.data.frame()
str(ranking)
km.res <- kmeans(ranking, 4, nstart = 25)
ranking <- ranking.df %>% as.data.frame() %>% scale()
ranking <- ranking.df %>% as.data.frame() %>% scale(percentile_rank_vol)
ranking <- ranking.df %>% scale(percentile_rank_vol)
View(ranking.df)
